import java.util.*;
import java.time.LocalDate;

// Main class to run the system
public class SchoolManagementSystem {
    public static void main(String[] args) {
        School school = new School("ABC School");
        school.run();
    }
}

// School class that manages the entire system
class School {
    private final String name;
    private final List<Student> students;
    private final List<Teacher> teachers;
    private final List<Course> courses;
    private final List<AttendanceRecord> attendanceRecords;
    private final Scanner scanner;
    
    public School(String name) {
        this.name = name;
        this.students = new ArrayList<>();
        this.teachers = new ArrayList<>();
        this.courses = new ArrayList<>();
        this.attendanceRecords = new ArrayList<>();
        this.scanner = new Scanner(System.in);
        
        // Add some sample data
        initializeSampleData();
    }
    
    private void initializeSampleData() {
        // Add sample courses
        courses.add(new Course("MATH101", "Mathematics", "Basic Mathematics"));
        courses.add(new Course("ENG201", "English", "Advanced English"));
        courses.add(new Course("SCI301", "Science", "General Science"));
        
        // Add sample teachers
        teachers.add(new Teacher("T001", "John Smith", "jsmith@school.com", "Mathematics", 50000));
        teachers.add(new Teacher("T002", "Jane Doe", "jdoe@school.com", "English", 48000));
        teachers.add(new Teacher("T003", "Robert Johnson", "rjohnson@school.com", "Science", 52000));
        
        // Add sample students
        students.add(new Student("S001", "Alice Brown", "alice@school.com", "10th Grade", LocalDate.of(2023, 9, 1)));
        students.add(new Student("S002", "Bob Wilson", "bob@school.com", "10th Grade", LocalDate.of(2023, 9, 1)));
        students.add(new Student("S003", "Charlie Davis", "charlie@school.com", "11th Grade", LocalDate.of(2022, 9, 1)));
    }
    
    public void run() {
        boolean exit = false;
        
        while (!exit) {
            System.out.println("\n=== " + name + " Management System ===");
            System.out.println("1. Student Management");
            System.out.println("2. Teacher Management");
            System.out.println("3. Course Management");
            System.out.println("4. Attendance Management");
            System.out.println("5. Generate Reports");
            System.out.println("6. Exit");
            System.out.print("Please select an option: ");
            
            int choice = getIntInput();
            
            switch (choice) {
                case 1 -> studentManagement();
                case 2 -> teacherManagement();
                case 3 -> courseManagement();
                case 4 -> attendanceManagement();
                case 5 -> generateReports();
                case 6 -> {
                    exit = true;
                    System.out.println("Exiting system. Goodbye!");
                }
                default -> System.out.println("Invalid option. Please try again.");
            }
        }
    }
    
    private void studentManagement() {
        boolean back = false;
        
        while (!back) {
            System.out.println("\n=== Student Management ===");
            System.out.println("1. Add New Student");
            System.out.println("2. View All Students");
            System.out.println("3. Update Student Information");
            System.out.println("4. Remove Student");
            System.out.println("5. Back to Main Menu");
            System.out.print("Please select an option: ");
            
            int choice = getIntInput();
            
            switch (choice) {
                case 1 -> addStudent();
                case 2 -> viewAllStudents();
                case 3 -> updateStudent();
                case 4 -> removeStudent();
                case 5 -> back = true;
                default -> System.out.println("Invalid option. Please try again.");
            }
        }
    }
    
    private void addStudent() {
        System.out.println("\n--- Add New Student ---");
        System.out.print("Enter Student ID: ");
        String id = scanner.nextLine();
        
        // Check if student ID already exists
        for (Student student : students) {
            if (student.getId().equals(id)) {
                System.out.println("Student with this ID already exists.");
                return;
            }
        }
        
        System.out.print("Enter Student Name: ");
        String studentName = scanner.nextLine();
        
        System.out.print("Enter Email: ");
        String email = scanner.nextLine();
        
        System.out.print("Enter Grade: ");
        String grade = scanner.nextLine();
        
        Student newStudent = new Student(id, studentName, email, grade, LocalDate.now());
        students.add(newStudent);
        
        System.out.println("Student added successfully!");
    }
    
    private void viewAllStudents() {
        System.out.println("\n--- All Students ---");
        if (students.isEmpty()) {
            System.out.println("No students found.");
            return;
        }
        
        for (Student student : students) {
            System.out.println(student);
        }
    }
    
    private void updateStudent() {
        System.out.println("\n--- Update Student Information ---");
        System.out.print("Enter Student ID to update: ");
        String id = scanner.nextLine();
        
        for (Student student : students) {
            if (student.getId().equals(id)) {
                System.out.print("Enter new Name (current: " + student.getName() + "): ");
                String studentName = scanner.nextLine();
                if (!studentName.isEmpty()) {
                    student.setName(studentName);
                }
                
                System.out.print("Enter new Email (current: " + student.getEmail() + "): ");
                String email = scanner.nextLine();
                if (!email.isEmpty()) {
                    student.setEmail(email);
                }
                
                System.out.print("Enter new Grade (current: " + student.getGrade() + "): ");
                String grade = scanner.nextLine();
                if (!grade.isEmpty()) {
                    student.setGrade(grade);
                }
                
                System.out.println("Student information updated successfully!");
                return;
            }
        }
        
        System.out.println("Student with ID " + id + " not found.");
    }
    
    private void removeStudent() {
        System.out.println("\n--- Remove Student ---");
        System.out.print("Enter Student ID to remove: ");
        String id = scanner.nextLine();
        
        Iterator<Student> iterator = students.iterator();
        while (iterator.hasNext()) {
            Student student = iterator.next();
            if (student.getId().equals(id)) {
                iterator.remove();
                System.out.println("Student removed successfully!");
                return;
            }
        }
        
        System.out.println("Student with ID " + id + " not found.");
    }
    
    private void teacherManagement() {
        boolean back = false;
        
        while (!back) {
            System.out.println("\n=== Teacher Management ===");
            System.out.println("1. Add New Teacher");
            System.out.println("2. View All Teachers");
            System.out.println("3. Update Teacher Information");
            System.out.println("4. Remove Teacher");
            System.out.println("5. Back to Main Menu");
            System.out.print("Please select an option: ");
            
            int choice = getIntInput();
            
            switch (choice) {
                case 1 -> addTeacher();
                case 2 -> viewAllTeachers();
                case 3 -> updateTeacher();
                case 4 -> removeTeacher();
                case 5 -> back = true;
                default -> System.out.println("Invalid option. Please try again.");
            }
        }
    }
    
    private void addTeacher() {
        System.out.println("\n--- Add New Teacher ---");
        System.out.print("Enter Teacher ID: ");
        String id = scanner.nextLine();
        
        // Check if teacher ID already exists
        for (Teacher teacher : teachers) {
            if (teacher.getId().equals(id)) {
                System.out.println("Teacher with this ID already exists.");
                return;
            }
        }
        
        System.out.print("Enter Teacher Name: ");
        String teacherName = scanner.nextLine();
        
        System.out.print("Enter Email: ");
        String email = scanner.nextLine();
        
        System.out.print("Enter Department: ");
        String department = scanner.nextLine();
        
        System.out.print("Enter Salary: ");
        double salary = getDoubleInput();
        
        Teacher newTeacher = new Teacher(id, teacherName, email, department, salary);
        teachers.add(newTeacher);
        
        System.out.println("Teacher added successfully!");
    }
    
    private void viewAllTeachers() {
        System.out.println("\n--- All Teachers ---");
        if (teachers.isEmpty()) {
            System.out.println("No teachers found.");
            return;
        }
        
        for (Teacher teacher : teachers) {
            System.out.println(teacher);
        }
    }
    
    private void updateTeacher() {
        System.out.println("\n--- Update Teacher Information ---");
        System.out.print("Enter Teacher ID to update: ");
        String id = scanner.nextLine();
        
        for (Teacher teacher : teachers) {
            if (teacher.getId().equals(id)) {
                System.out.print("Enter new Name (current: " + teacher.getName() + "): ");
                String teacherName = scanner.nextLine();
                if (!teacherName.isEmpty()) {
                    teacher.setName(teacherName);
                }
                
                System.out.print("Enter new Email (current: " + teacher.getEmail() + "): ");
                String email = scanner.nextLine();
                if (!email.isEmpty()) {
                    teacher.setEmail(email);
                }
                
                System.out.print("Enter new Department (current: " + teacher.getDepartment() + "): ");
                String department = scanner.nextLine();
                if (!department.isEmpty()) {
                    teacher.setDepartment(department);
                }
                
                System.out.print("Enter new Salary (current: " + teacher.getSalary() + "): ");
                String salaryInput = scanner.nextLine();
                if (!salaryInput.isEmpty()) {
                    try {
                        double salary = Double.parseDouble(salaryInput);
                        teacher.setSalary(salary);
                    } catch (NumberFormatException e) {
                        System.out.println("Invalid salary format. Salary not updated.");
                    }
                }
                
                System.out.println("Teacher information updated successfully!");
                return;
            }
        }
        
        System.out.println("Teacher with ID " + id + " not found.");
    }
    
    private void removeTeacher() {
        System.out.println("\n--- Remove Teacher ---");
        System.out.print("Enter Teacher ID to remove: ");
        String id = scanner.nextLine();
        
        Iterator<Teacher> iterator = teachers.iterator();
        while (iterator.hasNext()) {
            Teacher teacher = iterator.next();
            if (teacher.getId().equals(id)) {
                iterator.remove();
                System.out.println("Teacher removed successfully!");
                return;
            }
        }
        
        System.out.println("Teacher with ID " + id + " not found.");
    }
    
    private void courseManagement() {
        boolean back = false;
        
        while (!back) {
            System.out.println("\n=== Course Management ===");
            System.out.println("1. Add New Course");
            System.out.println("2. View All Courses");
            System.out.println("3. Update Course Information");
            System.out.println("4. Remove Course");
            System.out.println("5. Back to Main Menu");
            System.out.print("Please select an option: ");
            
            int choice = getIntInput();
            
            switch (choice) {
                case 1 -> addCourse();
                case 2 -> viewAllCourses();
                case 3 -> updateCourse();
                case 4 -> removeCourse();
                case 5 -> back = true;
                default -> System.out.println("Invalid option. Please try again.");
            }
        }
    }
    
    private void addCourse() {
        System.out.println("\n--- Add New Course ---");
        System.out.print("Enter Course Code: ");
        String code = scanner.nextLine();
        
        // Check if course code already exists
        for (Course course : courses) {
            if (course.getCode().equals(code)) {
                System.out.println("Course with this code already exists.");
                return;
            }
        }
        
        System.out.print("Enter Course Name: ");
        String courseName = scanner.nextLine();
        
        System.out.print("Enter Course Description: ");
        String description = scanner.nextLine();
        
        Course newCourse = new Course(code, courseName, description);
        courses.add(newCourse);
        
        System.out.println("Course added successfully!");
    }
    
    private void viewAllCourses() {
        System.out.println("\n--- All Courses ---");
        if (courses.isEmpty()) {
            System.out.println("No courses found.");
            return;
        }
        
        for (Course course : courses) {
            System.out.println(course);
        }
    }
    
    private void updateCourse() {
        System.out.println("\n--- Update Course Information ---");
        System.out.print("Enter Course Code to update: ");
        String code = scanner.nextLine();
        
        for (Course course : courses) {
            if (course.getCode().equals(code)) {
                System.out.print("Enter new Name (current: " + course.getName() + "): ");
                String courseName = scanner.nextLine();
                if (!courseName.isEmpty()) {
                    course.setName(courseName);
                }
                
                System.out.print("Enter new Description (current: " + course.getDescription() + "): ");
                String description = scanner.nextLine();
                if (!description.isEmpty()) {
                    course.setDescription(description);
                }
                
                System.out.println("Course information updated successfully!");
                return;
            }
        }
        
        System.out.println("Course with code " + code + " not found.");
    }
    
    private void removeCourse() {
        System.out.println("\n--- Remove Course ---");
        System.out.print("Enter Course Code to remove: ");
        String code = scanner.nextLine();
        
        Iterator<Course> iterator = courses.iterator();
        while (iterator.hasNext()) {
            Course course = iterator.next();
            if (course.getCode().equals(code)) {
                iterator.remove();
                System.out.println("Course removed successfully!");
                return;
            }
        }
        
        System.out.println("Course with code " + code + " not found.");
    }
    
    private void attendanceManagement() {
        boolean back = false;
        
        while (!back) {
            System.out.println("\n=== Attendance Management ===");
            System.out.println("1. Mark Attendance");
            System.out.println("2. View Attendance Records");
            System.out.println("3. Back to Main Menu");
            System.out.print("Please select an option: ");
            
            int choice = getIntInput();
            
            switch (choice) {
                case 1 -> markAttendance();
                case 2 -> viewAttendanceRecords();
                case 3 -> back = true;
                default -> System.out.println("Invalid option. Please try again.");
            }
        }
    }
    
    private void markAttendance() {
        System.out.println("\n--- Mark Attendance ---");
        
        // Display students
        viewAllStudents();
        
        System.out.print("Enter Student ID: ");
        String studentId = scanner.nextLine();
        
        // Find student
        Student student = null;
        for (Student s : students) {
            if (s.getId().equals(studentId)) {
                student = s;
                break;
            }
        }
        
        if (student == null) {
            System.out.println("Student not found.");
            return;
        }
        
        // Display courses
        viewAllCourses();
        
        System.out.print("Enter Course Code: ");
        String courseCode = scanner.nextLine();
        
        // Find course
        Course course = null;
        for (Course c : courses) {
            if (c.getCode().equals(courseCode)) {
                course = c;
                break;
            }
        }
        
        if (course == null) {
            System.out.println("Course not found.");
            return;
        }
        
        System.out.print("Enter Date (YYYY-MM-DD) or press Enter for today: ");
        String dateInput = scanner.nextLine();
        LocalDate date;
        
        if (dateInput.isEmpty()) {
            date = LocalDate.now();
        } else {
            try {
                date = LocalDate.parse(dateInput);
            } catch (Exception e) {
                System.out.println("Invalid date format. Using today's date.");
                date = LocalDate.now();
            }
        }
        
        System.out.print("Is the student present? (Y/N): ");
        String presentInput = scanner.nextLine();
        boolean isPresent = presentInput.equalsIgnoreCase("Y");
        
        AttendanceRecord record = new AttendanceRecord(student, course, date, isPresent);
        attendanceRecords.add(record);
        
        System.out.println("Attendance recorded successfully!");
    }
    
    private void viewAttendanceRecords() {
        System.out.println("\n--- Attendance Records ---");
        if (attendanceRecords.isEmpty()) {
            System.out.println("No attendance records found.");
            return;
        }
        
        for (AttendanceRecord record : attendanceRecords) {
            System.out.println(record);
        }
    }
    
    private void generateReports() {
        boolean back = false;
        
        while (!back) {
            System.out.println("\n=== Generate Reports ===");
            System.out.println("1. Student Report");
            System.out.println("2. Teacher Report");
            System.out.println("3. Course Report");
            System.out.println("4. Attendance Report");
            System.out.println("5. Back to Main Menu");
            System.out.print("Please select an option: ");
            
            int choice = getIntInput();
            
            switch (choice) {
                case 1 -> generateStudentReport();
                case 2 -> generateTeacherReport();
                case 3 -> generateCourseReport();
                case 4 -> generateAttendanceReport();
                case 5 -> back = true;
                default -> System.out.println("Invalid option. Please try again.");
            }
        }
    }
    
    private void generateStudentReport() {
        System.out.println("\n--- Student Report ---");
        viewAllStudents();
        System.out.println("Total Students: " + students.size());
    }
    
    private void generateTeacherReport() {
        System.out.println("\n--- Teacher Report ---");
        viewAllTeachers();
        System.out.println("Total Teachers: " + teachers.size());
        
        double totalSalary = 0;
        for (Teacher teacher : teachers) {
            totalSalary += teacher.getSalary();
        }
        System.out.println("Total Salary Expenditure: $" + totalSalary);
    }
    
    private void generateCourseReport() {
        System.out.println("\n--- Course Report ---");
        viewAllCourses();
        System.out.println("Total Courses: " + courses.size());
    }
    
    private void generateAttendanceReport() {
        System.out.println("\n--- Attendance Report ---");
        
        if (attendanceRecords.isEmpty()) {
            System.out.println("No attendance records found.");
            return;
        }
        
        // Count present and absent records
        int presentCount = 0;
        int absentCount = 0;
        
        for (AttendanceRecord record : attendanceRecords) {
            if (record.isPresent()) {
                presentCount++;
            } else {
                absentCount++;
            }
        }
        
        double attendanceRate = (double) presentCount / (presentCount + absentCount) * 100;
        
        System.out.println("Total Attendance Records: " + attendanceRecords.size());
        System.out.println("Present: " + presentCount);
        System.out.println("Absent: " + absentCount);
        System.out.printf("Attendance Rate: %.2f%%\n", attendanceRate);
    }
    
    // Utility method to get integer input
    private int getIntInput() {
        while (true) {
            try {
                return Integer.parseInt(scanner.nextLine());
            } catch (NumberFormatException e) {
                System.out.print("Invalid input. Please enter a number: ");
            }
        }
    }
    
    // Utility method to get double input
    private double getDoubleInput() {
        while (true) {
            try {
                return Double.parseDouble(scanner.nextLine());
            } catch (NumberFormatException e) {
                System.out.print("Invalid input. Please enter a number: ");
            }
        }
    }
}

// Student class
class Student {
    private String id;
    private String name;
    private String email;
    private String grade;
    private LocalDate enrollmentDate;
    
    public Student(String id, String name, String email, String grade, LocalDate enrollmentDate) {
        this.id = id;
        this.name = name;
        this.email = email;
        this.grade = grade;
        this.enrollmentDate = enrollmentDate;
    }
    
    // Getters and setters
    public String getId() { return id; }
    public void setId(String id) { this.id = id; }
    
    public String getName() { return name; }
    public void setName(String name) { this.name = name; }
    
    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }
    
    public String getGrade() { return grade; }
    public void setGrade(String grade) { this.grade = grade; }
    
    public LocalDate getEnrollmentDate() { return enrollmentDate; }
    public void setEnrollmentDate(LocalDate enrollmentDate) { this.enrollmentDate = enrollmentDate; }
    
    @Override
    public String toString() {
        return "Student [ID: " + id + ", Name: " + name + ", Email: " + email + 
               ", Grade: " + grade + ", Enrollment Date: " + enrollmentDate + "]";
    }
}

// Teacher class
class Teacher {
    private String id;
    private String name;
    private String email;
    private String department;
    private double salary;
    
    public Teacher(String id, String name, String email, String department, double salary) {
        this.id = id;
        this.name = name;
        this.email = email;
        this.department = department;
        this.salary = salary;
    }
    
    // Getters and setters
    public String getId() { return id; }
    public void setId(String id) { this.id = id; }
    
    public String getName() { return name; }
    public void setName(String name) { this.name = name; }
    
    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }
    
    public String getDepartment() { return department; }
    public void setDepartment(String department) { this.department = department; }
    
    public double getSalary() { return salary; }
    public void setSalary(double salary) { this.salary = salary; }
    
    @Override
    public String toString() {
        return "Teacher [ID: " + id + ", Name: " + name + ", Email: " + email + 
               ", Department: " + department + ", Salary: $" + salary + "]";
    }
}

// Course class
class Course {
    private String code;
    private String name;
    private String description;
    
    public Course(String code, String name, String description) {
        this.code = code;
        this.name = name;
        this.description = description;
    }
    
    // Getters and setters
    public String getCode() { return code; }
    public void setCode(String code) { this.code = code; }
    
    public String getName() { return name; }
    public void setName(String name) { this.name = name; }
    
    public String getDescription() { return description; }
    public void setDescription(String description) { this.description = description; }
    
    @Override
    public String toString() {
        return "Course [Code: " + code + ", Name: " + name + ", Description: " + description + "]";
    }
}

// AttendanceRecord class
class AttendanceRecord {
    private Student student;
    private Course course;
    private LocalDate date;
    private boolean isPresent;
    
    public AttendanceRecord(Student student, Course course, LocalDate date, boolean isPresent) {
        this.student = student;
        this.course = course;
        this.date = date;
        this.isPresent = isPresent;
    }
    
    // Getters and setters
    public Student getStudent() { return student; }
    public void setStudent(Student student) { this.student = student; }
    
    public Course getCourse() { return course; }
    public void setCourse(Course course) { this.course = course; }
    
    public LocalDate getDate() { return date; }
    public void setDate(LocalDate date) { this.date = date; }
    
    public boolean isPresent() { return isPresent; }
    public void setPresent(boolean present) { isPresent = present; }
    
    @Override
    public String toString() {
        return "Attendance [Student: " + student.getName() + ", Course: " + course.getName() + 
               ", Date: " + date + ", Present: " + (isPresent ? "Yes" : "No") + "]";
    }
}